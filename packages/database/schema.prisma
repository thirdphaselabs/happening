generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProfileRole {
  PLAVENTI_ADMIN
  ORGANIZER_ADMIN
  ORGANIZER
  MEMBER
}

enum OnboardingStatus {
  PROFILE
  TEAM
  INVITE
  COMPLETED
}

model Profile {
  id        String      @id @default(cuid())
  firstName String?
  lastName  String?
  userRole  ProfileRole 
  workosId   String   @unique
  createdAt DateTime @default(now())
  onboardingStatus OnboardingStatus @default(PROFILE)

  teamId String?
  hasCreatedTeam Boolean @default(false)
  team   Team? @relation(fields: [teamId], references: [id])
  createdEvents Event[]
  guestLists GuestListAttendee[]

  @@index([workosId])
}

model Team {
  id                  String      @id @default(cuid())
  workosOrganisationId String   @unique
  name                String   
  createdAt           DateTime @default(now())
  domain              String   @unique

  profiles Profile[]
  events Event[]

  @@index([id])
}

enum EventStatus {
  DRAFT
  ACTIVE
  SOLD_OUT
  PAST
  CANCELLED
}

enum EventVisibility {
  PUBLIC
  PRIVATE
}

model Event {
  id        String   @id @default(cuid())
  identifier String   @unique
  title     String   @unique
  description String
  status   EventStatus 
  coverImageUrl String?
  isApprovalRequired Boolean @default(false)
  visibility EventVisibility @default(PUBLIC)
  createdAt DateTime @default(now())

  location EventLocation?
  timing EventDate?
  ticketing Ticketing?
  guestList GuestList?

  createdByProfileId String
  createdBy Profile @relation(fields: [createdByProfileId], references: [id])

  teamId String
  team   Team @relation(fields: [teamId], references: [id])
}

enum LocationType {
  VENUE
  ONLINE
}

model EventLocation {
  id        String      @id @default(cuid())
  type     LocationType
  venue      String?
  address   String?
  city      String?
  country   String?
  postalCode String?
  latitude  Float?
  longitude Float?
  onlineLocationLink String?
  createdAt DateTime @default(now())

  eventId String @unique
  event   Event @relation(fields: [eventId], references: [identifier])
}

model EventDate {
  id        String      @id @default(cuid())
  startDate DateTime
  endDate DateTime  
  isStartTimeVisible Boolean
  isEndTimeVisible Boolean
  createdAt DateTime @default(now())
  timezone String

  eventId String @unique
  event   Event @relation(fields: [eventId], references: [identifier])
}

enum TicketType {
  FREE
  PAID
}

model Ticketing {
  id        String      @id @default(cuid())
  type      TicketType
  price     Float?
  createdAt DateTime @default(now())

  eventId String @unique
  event   Event @relation(fields: [eventId], references: [identifier])
}

model GuestList {
  id        String   @id @default(cuid())
  requiresApproval Boolean @default(false)
  isVisible Boolean @default(true)
  attendees GuestListAttendee[]
  createdAt DateTime @default(now())

  eventId String @unique
  event   Event @relation(fields: [eventId], references: [identifier])
}

model GuestListAttendee {
  id        String   @id @default(cuid())
  isApproved Boolean
  createdAt DateTime @default(now())

  profileId      String @unique
  profile        Profile @relation(fields: [profileId], references: [id])
  guestListId String
  guestList   GuestList @relation(fields: [guestListId], references: [id])
}

model Waitlist {
  id        Int   @id @default(autoincrement())
  email     String   @unique
  createdAt DateTime @default(now())
}